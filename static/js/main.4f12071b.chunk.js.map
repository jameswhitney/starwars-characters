{"version":3,"sources":["components/Nav.js","components/Card.js","components/Cardlist.js","components/Loading.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nav","search","Fragment","className","type","placeholder","onChange","Card","name","alt","src","Cardlist","users","map","user","i","key","id","Loading","class","urls","App","onSearchChange","event","setState","searchfield","target","value","getCharacter","a","async","characterData","Promise","all","url","fetch","resp","json","state","this","getCharacterData","characterArray","flatMap","character","results","console","log","filterUsers","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f12071b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = ({ search }) => {\n  return(\n    <React.Fragment>\n      <header className=\"tc bg-black-60 w-100 fixed z-1 ph3 pv3 pv4-ns ph4-m ph5-l\">\n        <input\n          className=\"pa2 tc w-60 bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"StarWars Characters\"\n          // TODO: assign onChange to a method\n          // that filters cards based on name\n          // via text input\n          onChange={search}\n        />\n      </header>\n    </React.Fragment>\n  );\n}\n\nexport default Nav;","import React from 'react';\n\nconst Card = ({ name }) => {\n  return(\n    // Style for card uses tachyons instead of creating css file.\n    //\n    <article className=\"dib br2 pa3 ma3 b--black-30 grow shadow-4\">\n      <div className=\"flex items-right\">\n        <img className=\"self-center br-100 h3 w3 ba bw2 b--black-40 pa2 bg-washed-blue\" \n          alt='robots'\n          // dicebear.com used to generated random avatars for cards\n          src={`https://avatars.dicebear.com/v2/bottts/${name}.svg`} \n        />\n        <div className=\"f4 ma2 pa2 tc white\">\n          <h3>{name}</h3>\n        </div>\n      </div>\n    </article>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// Cardlist returns an array of card components\n// User object passed as prop from App.js \nconst Cardlist = ({ users }) => {\n  return(\n    <div className=\"mw-none center pt6 ph5-ns tc\">\n      {/* Loop through user object and map id, name and email to Card component */}\n      {\n        users.map((user, i) => {\n          return(\n          <Card \n            key={i}\n            id={user.id}\n            name={user.name}\n          />\n          );\n        }) \n      }\n    </div>\n  );\n}\n\nexport default Cardlist;","import React from 'react';\nimport './Loading.css';\n\nconst Loading = () => {\n  return(\n    <div class=\"container\">\n      <div class=\"view spinning\"></div>\n    </div>\n  );\n}\n\nexport default Loading;","import React, { Component } from 'react';\nimport Nav from '../components/Nav';\n// Displays card components\nimport Cardlist from '../components/Cardlist';\nimport Loading from '../components/Loading'\n// Hard coded array of users for testing Card and Cardlist components\n// import { users } from './Users'\nimport './App.css';\n\nconst urls = ['https://swapi.co/api/people/',\n'https://swapi.co/api/people/?page=2',\n'https://swapi.co/api/people/?page=3',\n'https://swapi.co/api/people/?page=4',\n'https://swapi.co/api/people/?page=5',\n'https://swapi.co/api/people/?page=6',\n'https://swapi.co/api/people/?page=7',\n'https://swapi.co/api/people/?page=8',\n'https://swapi.co/api/people/?page=9',\n]\n\n class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      users: [],\n      searchfield: ''\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const getCharacterData = await this.getCharacter(urls)\n      const characterArray = getCharacterData.flatMap(character => character.results)\n      this.setState({ users: characterArray })\n    } catch {\n      console.log('Ooops. Looks like something went wrong.')\n    }\n\n  }\n  \n  // onSearchChange handles user input\n  // TODO: set/change of searchfield\n  // based on user input. \n  onSearchChange = (event) => {\n    // logging event changes as simple test of searchfield\n    // console.log(event.target.value)\n    this.setState({ searchfield: event.target.value })\n  }\n\n  getCharacter = async (urls) => {\n    const characterData = Promise.all(urls.map(async function(url) {\n      const resp = await fetch(url);\n      return resp.json()\n    }));\n    return characterData;\n  }\n  \n  render() {\n    // Create function to filter cards\n    // from user input in Nav component\n    const { searchfield, users } = this.state;\n    const filterUsers = users.filter(user => {\n      return user.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    \n    return !users.length ?\n      <Loading /> :\n      (\n      <React.Fragment>\n        {/* Nav component used later to search characters */}\n        <Nav search={ this.onSearchChange } />\n        {/* Display array of cards with data from Users.js */}\n        <Cardlist users={filterUsers}/>\n      </React.Fragment>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}